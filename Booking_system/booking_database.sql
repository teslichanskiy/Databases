-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.booking
(
    booking_id integer NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    overall_cost integer NOT NULL,
    house_id integer NOT NULL,
    client_id integer NOT NULL,
    discount_id integer,
    extra_service_id integer,
    status character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT contract_pkey PRIMARY KEY (booking_id)
);

CREATE TABLE IF NOT EXISTS public.client
(
    client_id integer NOT NULL,
    first_name character varying COLLATE pg_catalog."default" NOT NULL,
    last_name character varying COLLATE pg_catalog."default" NOT NULL,
    phone_number character varying COLLATE pg_catalog."default" NOT NULL,
    email character varying COLLATE pg_catalog."default" NOT NULL,
    date_of_registration date NOT NULL,
    "VIP" boolean,
    CONSTRAINT client_pkey PRIMARY KEY (client_id)
);

CREATE TABLE IF NOT EXISTS public.discount
(
    discount_id integer NOT NULL,
    percent integer NOT NULL,
    seasoned boolean,
    "for_VIP" boolean,
    min_duration_of_rent integer NOT NULL,
    CONSTRAINT discount_pkey PRIMARY KEY (discount_id)
);

CREATE TABLE IF NOT EXISTS public.extra_service
(
    extra_service_id integer NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    description character varying COLLATE pg_catalog."default" NOT NULL,
    price integer NOT NULL,
    CONSTRAINT extra_service_pkey PRIMARY KEY (extra_service_id)
);

CREATE TABLE IF NOT EXISTS public.feedback
(
    feedback_id integer NOT NULL,
    client_id integer NOT NULL,
    house_id integer NOT NULL,
    rating integer NOT NULL,
    text text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT feedback_pkey PRIMARY KEY (feedback_id)
);

CREATE TABLE IF NOT EXISTS public.house
(
    house_id integer NOT NULL,
    adress character varying COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    photo character varying COLLATE pg_catalog."default" NOT NULL,
    cost_per_day integer NOT NULL,
    capacity integer NOT NULL,
    is_available boolean,
    CONSTRAINT house_pkey PRIMARY KEY (house_id)
);

CREATE TABLE IF NOT EXISTS public.payment
(
    payment_id integer NOT NULL,
    booking_id integer NOT NULL,
    client_id integer NOT NULL,
    amount integer NOT NULL,
    date date NOT NULL,
    method character varying COLLATE pg_catalog."default" NOT NULL,
    paid boolean,
    CONSTRAINT payment_pkey PRIMARY KEY (payment_id)
);

CREATE TABLE IF NOT EXISTS public.booking_discount
(
    booking_discount_id integer,
    discount_discount_id integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public.booking_extra_service
(
    booking_extra_service_id integer,
    extra_service_extra_service_id integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public.payment_booking
(
    payment_booking_id integer NOT NULL,
    booking_booking_id integer NOT NULL
);

ALTER TABLE IF EXISTS public.booking
    ADD FOREIGN KEY (house_id)
    REFERENCES public.house (house_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.booking
    ADD FOREIGN KEY (client_id)
    REFERENCES public.client (client_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.feedback
    ADD FOREIGN KEY (house_id)
    REFERENCES public.house (house_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.feedback
    ADD FOREIGN KEY (client_id)
    REFERENCES public.client (client_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.payment
    ADD FOREIGN KEY (client_id)
    REFERENCES public.client (client_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.booking_discount
    ADD FOREIGN KEY (booking_discount_id)
    REFERENCES public.booking (discount_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.booking_discount
    ADD FOREIGN KEY (discount_discount_id)
    REFERENCES public.discount (discount_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.booking_extra_service
    ADD FOREIGN KEY (booking_extra_service_id)
    REFERENCES public.booking (extra_service_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.booking_extra_service
    ADD FOREIGN KEY (extra_service_extra_service_id)
    REFERENCES public.extra_service (extra_service_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.payment_booking
    ADD FOREIGN KEY (payment_booking_id)
    REFERENCES public.payment (booking_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.payment_booking
    ADD FOREIGN KEY (booking_booking_id)
    REFERENCES public.booking (booking_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;